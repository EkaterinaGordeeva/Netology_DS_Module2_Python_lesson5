{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите размер матрицы:\n",
      "4\n",
      "[3. 2. 1. 0.]\n",
      "6.0\n",
      "   movieId                             title\n",
      "0      318  Shawshank Redemption, The (1994)\n",
      "219179627208.76712\n",
      "['x']  =  [28]\n",
      "['y']  =  [29]\n",
      "['z']  =  [-8]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "print('Введите размер матрицы:')\n",
    "N=int(input())\n",
    "\n",
    "#Задание 1. Создание numpy array\n",
    "A1=np.linspace(N-1,0,N)\n",
    "print(A1)\n",
    "\n",
    "#Задание 2. Создание диагональной матрицы и вычисление суммы диагональных элементов\n",
    "A2 = np.diag(np.linspace(N-1, 0,N))\n",
    "print(A2.sum())\n",
    "\n",
    "#Задание 3.\n",
    "ratings = pd.read_csv('C:/Users/Katya/Desktop/ratings.csv')\n",
    "movies = pd.read_csv('C:/Users/Katya/Desktop/movies.csv') \n",
    "#Поиск фильма, у которогобольше всего оценок=5\n",
    "maxRating=ratings[ratings.rating==5].groupby('movieId').count().sort_values('rating', ascending=False).head(1)\n",
    "#объединение полученнорй таблицы с movies для выводаназвания фильма\n",
    "print(maxRating.merge(movies, on='movieId', how='left')[['movieId', 'title']])\n",
    "\n",
    "#Задание 4.\n",
    "data = pd.read_csv('C:/Users/Katya/Desktop/power.csv')\n",
    "\n",
    "#Проверка на то, как страны называются в таблице\n",
    "data[data['country'].str.contains('atv', case=False)| data['country'].str.contains('est', case=False)|data['country'].str.contains('lit', case=False)]['country'].unique()\n",
    "\n",
    "#Можно ли как-то сократить условие и сделать в виде data.country in [перечисление значений]? Не получилось в синтаксисе разобраться.\n",
    "print(data[((data.country=='Latvia')|(data.country=='Lithuania')|(data.country=='Estonia'))&((data.category==4)|(data.category==12)|(data.category==21))&(data.year>=2005)&(data.year<=2010)&data.quantity>=0]['quantity'].sum())\n",
    "\n",
    "#Задание 5. Решить систему уравнений\n",
    "#M*[x,y,z]=N, [x,y,z] = M(-1)*N\n",
    "xyz=np.array([['x'],['y'],['z']])\n",
    "M=np.array([[4,2,1],[1,3,0],[0,5,4]])\n",
    "N=np.array([[4],[12],[-3]])\n",
    "result=M.transpose().dot(N)\n",
    "for i in range(xyz.shape[0]):\n",
    "    print(xyz[i],' = ', result[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
